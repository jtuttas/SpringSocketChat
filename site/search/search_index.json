{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"automat/","text":"Automatisierung mittels GitHub Actions Bauen der Anwendung Das Bauen der Anwendung kann auch mittels github Actions automatisch auf Github erfolgen. Dazu muss eine .yml Datei ind das Verzeichnis .github/workflows aktiviert haben. Zahlreiche Actions sind bereits entwickelt, so auch die zum Packen eines Maven Projektes. Nach einem Commit auf das Repository kann die Anwendung als jar File herunter geladen werden. Bauen des Docker Images Ebenso kann der Docker Container der Anwendung automatisch via einer GitHub Action gebaut werden. Zum Speichern des Images wird dazu eine Registry verwendet. Default wird die Registry von docker.io benutzt. Die Notwendigen Credentials f\u00fcr das Einloggen auf dem Docker Hub werden in Github hinterlegt. Bei einem Push auf den master Branch kann man den Ablauf des Workflows auf github beobachten. Nun kann man auf jedem Rechner auf dem Docker installiert ist die Anwendung Starten, z.B. bei Play With Docker .","title":"Automatisierung"},{"location":"automat/#automatisierung-mittels-github-actions","text":"","title":"Automatisierung mittels GitHub Actions"},{"location":"automat/#bauen-der-anwendung","text":"Das Bauen der Anwendung kann auch mittels github Actions automatisch auf Github erfolgen. Dazu muss eine .yml Datei ind das Verzeichnis .github/workflows aktiviert haben. Zahlreiche Actions sind bereits entwickelt, so auch die zum Packen eines Maven Projektes. Nach einem Commit auf das Repository kann die Anwendung als jar File herunter geladen werden.","title":"Bauen der Anwendung"},{"location":"automat/#bauen-des-docker-images","text":"Ebenso kann der Docker Container der Anwendung automatisch via einer GitHub Action gebaut werden. Zum Speichern des Images wird dazu eine Registry verwendet. Default wird die Registry von docker.io benutzt. Die Notwendigen Credentials f\u00fcr das Einloggen auf dem Docker Hub werden in Github hinterlegt. Bei einem Push auf den master Branch kann man den Ablauf des Workflows auf github beobachten. Nun kann man auf jedem Rechner auf dem Docker installiert ist die Anwendung Starten, z.B. bei Play With Docker .","title":"Bauen des Docker Images"},{"location":"beschreibung/","text":"CI/CD mit Docker \u00fcber GitHub Actions Dauer: 2 Stunden Beschreibung: In diesem 2-st\u00fcndigen Workshop erhalten Sie einen detaillierten Einblick in die Automatisierung und den Deployment-Prozess einer Spring Boot Anwendung mittels Docker und GitHub Actions. Der Schwerpunkt liegt auf der Demonstration und Erkl\u00e4rung der CI/CD-Pipeline \u2013 von einem simplen Commit bis zum erfolgreichen Deployment in Azure. Inhalte: \u00dcbersicht \u00fcber GitHub Actions: Verst\u00e4ndnis des Potenzials und der Funktionsweise von GitHub Actions im Rahmen der CI/CD-Strategien. Integration von Docker: Vertiefung in die Rolle von Docker im CI/CD-Prozess, einschlie\u00dflich Erkl\u00e4rungen zu Dockerfiles, Image-Management und Interaktionen mit Azure. Pipeline-Demonstration: Eine Schritt-f\u00fcr-Schritt-Vorf\u00fchrung der CI/CD-Pipeline mit GitHub Actions \u2013 von der Code-Commit-Phase \u00fcber das Docker-Building bis hin zum Deployment in den Azure-Containerdienst. Hinweise f\u00fcr die Teilnehmer: Um die im Workshop vorgef\u00fchrte Pipeline selbst nachzuvollziehen und auszuprobieren, sollten die Teilnehmer \u00fcber aktive Konten bei GitHub, Docker und Azure verf\u00fcgen. Ziele: Detailliertes Verst\u00e4ndnis des CI/CD-Prozesses mit GitHub Actions und Docker. Erkenntnisse dar\u00fcber, wie moderne Deployment-Strategien f\u00fcr Cloud-Plattformen wie Azure aussehen. Klarheit \u00fcber die notwendigen Schritte und Tools, um die vorgef\u00fchrte Pipeline selbstst\u00e4ndig zu replizieren. Voraussetzungen: Ein Basisverst\u00e4ndnis von Softwareentwicklung, Docker und Cloud-Plattformen ist von Vorteil, aber nicht zwingend erforderlich. Dieser Workshop ist perfekt f\u00fcr Entwickler, DevOps-Ingenieure und IT-Enthusiasten, die einen praxisnahen Einblick in moderne Deployment-Techniken w\u00fcnschen. Werfen Sie mit uns einen Blick hinter die Kulissen und verstehen Sie die Magie von automatisierten Deployment-Pipelines!","title":"Beschreibung"},{"location":"hosten/","text":"Hosten bei Azure Im n\u00e4chsten Schritt soll der Container bei Azure gehostet werden. Dazu muss nach der Anmeldung bei Azure hier eine Azure App Service erstellt werden. Erstellen einer Web App Anschlie\u00dfend erh\u00e4lt man eine \u00dcbersicht der Web App und auch schon eine URL unter der diese aufgerufen werden kann. Konfigurieren der Web App \u00dcber den Men\u00fcpunkt Konfiguration muss man nun noch den entsprechenden Port \u00f6ffnen. Dieses geschieht dadurch, dass man Hier den Key WEBSITES_PORT und als Value den Port eintr\u00e4gt, hier 8080 . Einrichten des Web Hooks \u00dcber den Men\u00fcpunkt Bereitstellungszenter muss nun der Webhook konfiguriert werden. Diesen Webhook muss nun in die Zwischenablage kopiert werden, um ihn Docker bekannt zu machen. Hierzu muss sich auf dem Docker Hub angemeldet werden und im Reiter Webhooks die Adresse aus Azure eingef\u00fcgt werden. Damit benachrichtigt der Docker Hub Azure, wenn eine neue Version des Images erzeugt wurde. Automatisieren mit Powershell Die Schritte des erstellen einer Ressource Gruppe, anlegen eines App Service Plans und starten der Web App mit dem Container l\u00e4sst sich auch mittels Powershell realisieren. Hier das notwendige Skript. # Importieren der notwendigen Module Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -AllowClobber # Anmelden bei Azure Connect-AzAccount ## Wenn es hier zu einem Fehler kommt nutzt auch oftmals Connect-AzAccount -UseDeviceAuthentication # Einige Variable festlegen $resourceGroupName = \"jtudockerplay\" $location = \"westeurope\" $imagename = \"tuttas/webchat\" $containerName = \"jtucontainer\" $appServicePlaneName = \"jtuserviceplan\" $appName = \"jtuapp\" # Erstellen einer ResourceGruppe $rg = Get-AzResourceGroup -Name $resourceGroupName -ErrorVariable err -ErrorAction SilentlyContinue if ( $err ) { # Resource Group existiert nicht und wird anleget $rg = New-AzResourceGroup -Name $resourceGroupName -Location $location } $rg # Starten des Containers New-AzAppServicePlan -Name $appServicePlaneName -Location $location -ResourceGroupName $resourceGroupName -Tier BasicB1 -Linux New-AZWebApp -Name $appName -AppServicePlan $appServicePlaneName -Location $location -ResourceGroupName $resourceGroupName -ContainerImageName $imagename -EnableContainerContinuousDeployment $config = Get-AzResource -ResourceGroupName $resourceGroupName -ResourceType Microsoft . Web / sites / config -ResourceName $appName -ApiVersion 2018 - 02 - 01 $config . Properties . linuxFxVersion = \"DOCKER| $( $imagename ) :latest\" $config | Set-AzResource -ApiVersion 2018 - 02 - 01 -Force Lediglich das Kopieren des Web-Hooks und einf\u00fcgen beim Docker Hub muss noch manuell gestartet werden. Die oben abgebildete Web App kann dann \u00fcber http://jtuapp.azurewebsites.net/ abgerufen werden. Dieses Dokument als Webseite https://jtuttas.github.io/SpringSocketChat/site/lokal/","title":"Hosten"},{"location":"hosten/#hosten-bei-azure","text":"Im n\u00e4chsten Schritt soll der Container bei Azure gehostet werden. Dazu muss nach der Anmeldung bei Azure hier eine Azure App Service erstellt werden.","title":"Hosten bei Azure"},{"location":"hosten/#erstellen-einer-web-app","text":"Anschlie\u00dfend erh\u00e4lt man eine \u00dcbersicht der Web App und auch schon eine URL unter der diese aufgerufen werden kann.","title":"Erstellen einer Web App"},{"location":"hosten/#konfigurieren-der-web-app","text":"\u00dcber den Men\u00fcpunkt Konfiguration muss man nun noch den entsprechenden Port \u00f6ffnen. Dieses geschieht dadurch, dass man Hier den Key WEBSITES_PORT und als Value den Port eintr\u00e4gt, hier 8080 .","title":"Konfigurieren der Web App"},{"location":"hosten/#einrichten-des-web-hooks","text":"\u00dcber den Men\u00fcpunkt Bereitstellungszenter muss nun der Webhook konfiguriert werden. Diesen Webhook muss nun in die Zwischenablage kopiert werden, um ihn Docker bekannt zu machen. Hierzu muss sich auf dem Docker Hub angemeldet werden und im Reiter Webhooks die Adresse aus Azure eingef\u00fcgt werden. Damit benachrichtigt der Docker Hub Azure, wenn eine neue Version des Images erzeugt wurde.","title":"Einrichten des Web Hooks"},{"location":"hosten/#automatisieren-mit-powershell","text":"Die Schritte des erstellen einer Ressource Gruppe, anlegen eines App Service Plans und starten der Web App mit dem Container l\u00e4sst sich auch mittels Powershell realisieren. Hier das notwendige Skript. # Importieren der notwendigen Module Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -AllowClobber # Anmelden bei Azure Connect-AzAccount ## Wenn es hier zu einem Fehler kommt nutzt auch oftmals Connect-AzAccount -UseDeviceAuthentication # Einige Variable festlegen $resourceGroupName = \"jtudockerplay\" $location = \"westeurope\" $imagename = \"tuttas/webchat\" $containerName = \"jtucontainer\" $appServicePlaneName = \"jtuserviceplan\" $appName = \"jtuapp\" # Erstellen einer ResourceGruppe $rg = Get-AzResourceGroup -Name $resourceGroupName -ErrorVariable err -ErrorAction SilentlyContinue if ( $err ) { # Resource Group existiert nicht und wird anleget $rg = New-AzResourceGroup -Name $resourceGroupName -Location $location } $rg # Starten des Containers New-AzAppServicePlan -Name $appServicePlaneName -Location $location -ResourceGroupName $resourceGroupName -Tier BasicB1 -Linux New-AZWebApp -Name $appName -AppServicePlan $appServicePlaneName -Location $location -ResourceGroupName $resourceGroupName -ContainerImageName $imagename -EnableContainerContinuousDeployment $config = Get-AzResource -ResourceGroupName $resourceGroupName -ResourceType Microsoft . Web / sites / config -ResourceName $appName -ApiVersion 2018 - 02 - 01 $config . Properties . linuxFxVersion = \"DOCKER| $( $imagename ) :latest\" $config | Set-AzResource -ApiVersion 2018 - 02 - 01 -Force Lediglich das Kopieren des Web-Hooks und einf\u00fcgen beim Docker Hub muss noch manuell gestartet werden. Die oben abgebildete Web App kann dann \u00fcber http://jtuapp.azurewebsites.net/ abgerufen werden.","title":"Automatisieren mit Powershell"},{"location":"hosten/#dieses-dokument-als-webseite","text":"https://jtuttas.github.io/SpringSocketChat/site/lokal/","title":"Dieses Dokument als Webseite"},{"location":"lokal/","text":"CI/CD mit github Action, Docker und Azure Im Folgenden wollen wir ein Java Maven Projekt \u00fcber einen GitHub Workflow in einen Docker Image ver\u00f6ffentlichen und dieses dann als Container auf Azure starten. Das Software Projekt Dieses Java Programm realisiert eine Chat-App basierend auf dem Spring boot Framework. Soll die Anwendung lokal gestartet werden, so muss auf dem lokalen Server nat\u00fcrlich JAVA als Laufzeitumgebung und Maven als Build-Tool installiert sein. Nach dem Klonen des Repositories wechselt man in das Verzeichnis und ruft MAVEN auf: mvn package Anschlie\u00dfend wird... das Projekt kompiliert die Abh\u00e4ngigkeiten werden aufgel\u00f6st JUNIT Tests werden durchgef\u00fchrt Das Programm zu einem jar Datei gepackt. Die jar Datei befindet sich im Ordner ./target. Daher kann die Anwendung mittels folgenden Befehl gestartet werden. java -jar target\\spring-boot-web-socket-0.0.1-SNAPSHOT.jar Nach einer kurzen Wartezeit kann die Anwendung \u00fcber einen Browser unter http://localhost:8080 aufgerufen werden. Der Docker Container Dieses ist nat\u00fcrlich alles sehr umst\u00e4ndlich und daher ist es eine gute Idee das Projekt in einen Docker Container zu packen. Im Hauptordner befindet sich bereits ein entsprechendes Dockerfile und man kann das Image bauen \u00fcber: docker build -t tuttas/webchat . Anschlie\u00dfend kann der Docker Container gestartet werden \u00fcber: docker run -p 8080:8080 tuttas/webchat","title":"Lokal"},{"location":"lokal/#cicd-mit-github-action-docker-und-azure","text":"Im Folgenden wollen wir ein Java Maven Projekt \u00fcber einen GitHub Workflow in einen Docker Image ver\u00f6ffentlichen und dieses dann als Container auf Azure starten.","title":"CI/CD mit github Action, Docker und Azure"},{"location":"lokal/#das-software-projekt","text":"Dieses Java Programm realisiert eine Chat-App basierend auf dem Spring boot Framework. Soll die Anwendung lokal gestartet werden, so muss auf dem lokalen Server nat\u00fcrlich JAVA als Laufzeitumgebung und Maven als Build-Tool installiert sein. Nach dem Klonen des Repositories wechselt man in das Verzeichnis und ruft MAVEN auf: mvn package Anschlie\u00dfend wird... das Projekt kompiliert die Abh\u00e4ngigkeiten werden aufgel\u00f6st JUNIT Tests werden durchgef\u00fchrt Das Programm zu einem jar Datei gepackt. Die jar Datei befindet sich im Ordner ./target. Daher kann die Anwendung mittels folgenden Befehl gestartet werden. java -jar target\\spring-boot-web-socket-0.0.1-SNAPSHOT.jar Nach einer kurzen Wartezeit kann die Anwendung \u00fcber einen Browser unter http://localhost:8080 aufgerufen werden.","title":"Das Software Projekt"},{"location":"lokal/#der-docker-container","text":"Dieses ist nat\u00fcrlich alles sehr umst\u00e4ndlich und daher ist es eine gute Idee das Projekt in einen Docker Container zu packen. Im Hauptordner befindet sich bereits ein entsprechendes Dockerfile und man kann das Image bauen \u00fcber: docker build -t tuttas/webchat . Anschlie\u00dfend kann der Docker Container gestartet werden \u00fcber: docker run -p 8080:8080 tuttas/webchat","title":"Der Docker Container"}]}